package io.github.darvld.graphql.generation

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import graphql.schema.GraphQLInputObjectType
import io.github.darvld.graphql.extensions.generatedName
import io.github.darvld.graphql.extensions.nonNullable
import io.github.darvld.graphql.extensions.nullable
import io.github.darvld.graphql.extensions.typeName
import io.github.darvld.graphql.model.GenerationEnvironment

/**Generates a [TypeSpec] for a GraphQL input type as a Kotlin DTO.*/
internal fun GenerationEnvironment.generateInputType(typeDefinition: GraphQLInputObjectType): TypeSpec {
    val generatedTypeName = typeDefinition.generatedName()
    val type = TypeSpec.Companion.classBuilder(generatedTypeName).addModifiers(KModifier.DATA)

    val constructor = FunSpec.constructorBuilder()
    typeDefinition.fields.forEach {
        val fieldTypeName = it.type.typeName(packageName)

        constructor.addParameter(ParameterSpec.builder(it.name, fieldTypeName).build())
        type.addProperty(PropertySpec.builder(it.name, fieldTypeName).initializer(it.name).build())
    }
    type.primaryConstructor(constructor.build())

    return type.build()
}

/**Generates a [FunSpec] representing a pseudo-constructor for an input DTO that allows constructing input types from
 * unsafe maps (as generated by graphql-java).*/
internal fun GenerationEnvironment.generateInputDecoder(typeDefinition: GraphQLInputObjectType): FunSpec {
    val returnTypeName = typeDefinition.typeName(packageName).nonNullable()
    val builder = FunSpec.builder(typeDefinition.generatedName())

    builder.addParameter("map", MAP.parameterizedBy(STRING, ANY.nullable()))
    builder.returns(returnTypeName)

    val body = buildCodeBlock {
        add("return·%T(\n", returnTypeName)
        indent()

        for (field in typeDefinition.fields) {
            val extractor = buildFieldExtractor(
                extractor = { CodeBlock.of("map[%S]·as·%T", field.name, it) },
                fieldType = field.type,
            )

            addStatement("%L = %L,", field.name, extractor)
        }

        unindent()
        add(")\n")
    }

    builder.addCode(body)
    return builder.build()
}