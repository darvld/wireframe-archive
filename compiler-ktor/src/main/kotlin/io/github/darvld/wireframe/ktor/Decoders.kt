package io.github.darvld.wireframe.ktor

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import io.github.darvld.wireframe.extensions.buildFunction
import io.github.darvld.wireframe.extensions.markAsGenerated
import io.github.darvld.wireframe.extensions.nullable
import io.github.darvld.wireframe.generation.buildFieldExtractor
import io.github.darvld.wireframe.ktor.InputNames.DecoderMapParameter
import io.github.darvld.wireframe.model.GenerationEnvironment
import io.github.darvld.wireframe.model.InputDTO

private object InputNames {
    const val DecoderMapParameter = "map"
}

/**Generates a [FunSpec] that allows constructing this DTO from unsafe maps (as generated by graphql-java).*/
internal fun InputDTO.buildDecoder(
    environment: GenerationEnvironment,
): FunSpec = buildFunction(generatedType.simpleName) {
    markAsGenerated()
    addKdoc("Constructs a new $name from an unsafe map. This is useful for decoding the query parameters provided by graphql-java.")

    returns(generatedType)
    addParameter(DecoderMapParameter, MAP.parameterizedBy(STRING, ANY.nullable()))

    addCode(buildCodeBlock {
        add("return·%T(\n", generatedType)
        indent()

        for (field in definition.fields) {
            val extractor = environment.buildFieldExtractor(
                extractor = { CodeBlock.of("%L[%S]·as·%T", DecoderMapParameter, field.name, it) },
                fieldType = field.type,
            )

            addStatement("%L = %L,", field.name, extractor)
        }

        unindent()
        add(")\n")
    })
}